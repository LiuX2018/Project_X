function [ figureHandle ] = coatingDataInputDialog(wavLenInUm,coatingCatalogueListFullNames,fontName,fontSize)
%COATINGDATAINPUTDIALOG Defines a dilog box which is used to input coating
% data based on its type. And returns a coating object constructed from the
% input data.

% Default Input
if nargin < 1
    % Used as primary wavelength for relative thickness values
    wavLenInUm = 0.55;
    % Get all catalogues from current folder
    coatingCatalogueListFullNames = getAllObjectCatalogues('coating');
    fontSize = 9.5;
    fontName = 'FixedWidth';
elseif nargin < 2
    % Get all catalogues from current folder
    coatingCatalogueListFullNames = getAllObjectCatalogues('coating');
    fontSize = 9.5;
    fontName = 'FixedWidth';
elseif nargin == 2
    fontSize = 9.5;
    fontName = 'FixedWidth';    
elseif nargin == 3
    fontName = 'FixedWidth';    
end

if isempty(coatingCatalogueListFullNames)
    figureHandle = NaN;
    disp('Error: No coating catalogue is found in the current folder.');
    return;
else
    [~,catalogueListFileNames,~] = cellfun(@(x) fileparts(x),...
       coatingCatalogueListFullNames,'UniformOutput',false);
   % extract the first catalogue and first coating from the catalogue
    firstCatalogueCoatingArray = extractObjectFromObjectCatalogue...
    ('coating','all',coatingCatalogueListFullNames{1});
    firstCatalogueCoatingNames =  {firstCatalogueCoatingArray.Name};
end
% Initialize handles structure
handles = struct();
handles.FirstCatalogueFullName =  coatingCatalogueListFullNames{1};

coatingObj = Coating;
% Create all UI controls
build_gui();

% Assign function output
figureHandle = handles.FigureHandle;
    function build_gui()
        % Creation of all uicontrols
        % --- FIGURE -------------------------------------
        handles.FigureHandle = figure( ...
            'Tag', 'FigureHandle', ...
            'Units','Normalized',...
            'Position', [0.3,0.3,0.5,0.5], ...
            'Name', 'Coating Data Entry', ... %'WindowStyle','Modal',...
            'MenuBar', 'none', ...
            'NumberTitle', 'off', ...
            'Color', get(0,'DefaultUicontrolBackgroundColor'));
        
        % --- PANELS -------------------------------------
        handles.panelMultilayerData = uipanel( ...
            'Parent', handles.FigureHandle, ...
            'Tag', 'panelMultilayerData', ...
            'Units','Normalized',...
            'Position', [0.45,0.12,0.53,0.85], ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'Visible','off',...
            'Title', 'Multilayer Refractive Index Profile');
        handles.panelJonesMatrixData = uipanel( ...
            'Parent', handles.FigureHandle, ...
            'Tag', 'panelJonesMatrixData', ...
            'Units','Normalized',...
            'Position', [0.45,0.12,0.53,0.85], ...
             'FontSize',fontSize,...
             'FontName',fontName,...
            'Visible','off',...
            'Title', 'Ideal Jones Matrix Coating');        
        handles.panelCoatingListing = uipanel( ...
            'Parent', handles.FigureHandle, ...
            'Tag', 'panelCoatingListing', ...
            'Units','Normalized',...
            'Position', [0.02,0.02,0.43,0.94], ...
             'FontSize',fontSize,...
             'FontName',fontName,...
            'Visible','On');
        
        % -----------------------------------------------------------------
        handles.lblCoatingCatalogueName = uicontrol( ...
            'Parent', handles.panelCoatingListing, ...
            'Tag', 'lblCoatingCatalogueName', ...
            'Style', 'text', ...
            'HorizontalAlignment','left',...
            'Units','Normalized',...
            'Position', [0.02,0.9,0.48,0.05], ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'String', 'Catalogue Name');   
        
        handles.popCoatingCatalogueName = uicontrol( ...
            'Parent', handles.panelCoatingListing, ...
            'Tag', 'popCoatingCatalogueName', ...
            'Style', 'popupmenu', ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'HorizontalAlignment','left',...
            'Units','Normalized',...
            'Position', [0.50,0.9,0.48,0.055], ...
            'BackgroundColor', [1 1 1],...
            'String',catalogueListFileNames);
                
        %-----------------------------------------------------------------
        
        handles.lblCoatingName = uicontrol( ...
            'Parent', handles.panelCoatingListing, ...
            'Tag', 'lblCoatingName', ...
            'Style', 'text', ...
            'HorizontalAlignment','left',...
            'Units','Normalized',...
            'Position', [0.02,0.8,0.48,0.05], ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'String', 'Coating Name');
       
         
        handles.txtCoatingName = uicontrol( ...
            'Parent', handles.panelCoatingListing, ...
            'Tag', 'txtCoatingName', ...
            'Style', 'edit', ...
            'HorizontalAlignment','left',...
            'Units','Normalized',...
            'Position', [0.50,0.80,0.48,0.05], ...
            'BackgroundColor', [1 1 1], ...
            'String', 'CoatingName', ...
            'FontSize',fontSize,'FontName',fontName);             
        % -----------------------------------------------------------------
        handles.lblCoatingType = uicontrol( ...
            'Parent', handles.panelCoatingListing, ...
            'Tag', 'lblCoatingType', ...
            'Style', 'text', ...
            'HorizontalAlignment','left',...
            'Units','Normalized',...
            'Position', [0.02,0.7,0.48,0.05], ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'String', 'Coating Type');   
        
        handles.popCoatingType = uicontrol( ...
            'Parent', handles.panelCoatingListing, ...
            'Tag', 'popCoatingType', ...
            'Style', 'popupmenu', ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'HorizontalAlignment','left',...
            'Units','Normalized',...
            'Position', [0.50,0.7,0.48,0.055], ... 
            'BackgroundColor', [1 1 1],...
            'String',{'None','BareGlass','Multilayer','JonesMatrix'},...
            'Value',1);      
        %------------------------------------------------------------------
        
        handles.lblRepetetion = uicontrol( ...
            'Parent', handles.panelMultilayerData, ...
            'Tag', 'lblRepetetion', ...
            'Style', 'text', ...
            'HorizontalAlignment','left',...
            'Units','Normalized',...
            'Position', [0.02,0.75,0.2,0.1], ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'String', 'Repetetion');
        
        handles.txtRepetetion = uicontrol( ...
            'Parent', handles.panelMultilayerData, ...
            'Tag', 'txtRepetetion', ...
            'Style', 'edit', ...
            'HorizontalAlignment','left',...
            'Units','Normalized',...
            'Position', [0.22,0.81,0.1,0.05], ...
            'BackgroundColor', [1 1 1], ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'String', num2str(1));        
         %------------------------------------------------------------------
        
        handles.lblWavelengthInUm = uicontrol( ...
            'Parent', handles.panelMultilayerData, ...
            'Tag', 'lblRepetetion', ...
            'Style', 'text', ...
            'HorizontalAlignment','left',...
            'Units','Normalized',...
            'Position', [0.35,0.75,0.2,0.1], ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'String', 'WavLen(um)');
        
        handles.txtWavelengthInUm = uicontrol( ...
            'Parent', handles.panelMultilayerData, ...
            'Tag', 'txtWavelengthInUm', ...
            'Style', 'edit', ...
            'HorizontalAlignment','left',...
            'Units','Normalized',...
            'Position', [0.55,0.81,0.1,0.05], ...
            'BackgroundColor', [1 1 1], ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'String', num2str(wavLenInUm),...
            'Enable','Off');        
        % --- CHECKBOXES -------------------------------------
        handles.chkReverse = uicontrol( ...
            'Parent', handles.panelMultilayerData, ...
            'Tag', 'chkReverse', ...
            'Style', 'checkbox', ...
            'Units','Normalized',...
            'Position', [0.67,0.78,0.3,0.1], ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'String', 'Revese Order',...
            'Value',logical(0));
        
        %-----------------------------------------------------------------
        handles.tblRefractiveIndexProfile = uitable( ...
            'Parent', handles.panelMultilayerData, ...
            'Tag', 'tblRefractiveIndexProfile', ...
            'UserData', zeros(1,0), ...
            'Units','Normalized',...
            'Position', [0.02,0.05,0.96,0.7], ...
            'FontSize',fontSize,'FontName',fontName,...
            'BackgroundColor', [1 1 1;0.961 0.961 0.961], ...
            'ColumnEditable', [true,true,true,false], ...
            'ColumnFormat', {'numeric','numeric','logical','numeric'}, ...
            'ColumnName', {'Refractive Index','Thickness (in um)','Relative', 'Actual Thickness (in um)'}, ...
            'ColumnWidth', {150,100,70,150}, ...
            'RowName', 'numbered',...
            'Data',{[1],[0],logical(0),[0]});
        %-----------------------------------------------------------------
        handles.tblTransmissionMatrix = uitable( ...
            'Parent', handles.panelJonesMatrixData, ...
            'Tag', 'tblTransmissionMatrix', ...
            'UserData', zeros(1,0), ...
            'Units','Normalized',...
            'Position', [0.02,0.45,0.96,0.3], ...
            'FontSize',fontSize,'FontName',fontName,...
            'BackgroundColor', [1 1 1;0.961 0.961 0.961], ...
            'ColumnEditable', [true,true], ...
            'ColumnFormat', {'numeric','numeric'}, ...
            'ColumnName', {'Ts','Tp'}, ...
            'ColumnWidth', {150,150}, ...
            'RowName',{'Ts','Tp'},...
            'Data',{[1],[0];[0],[1]});   
        
        %-----------------------------------------------------------------
        handles.tblReflectionMatrix = uitable( ...
            'Parent', handles.panelJonesMatrixData, ...
            'Tag', 'tblReflectionMatrix', ...
            'UserData', zeros(1,0), ...
            'Units','Normalized',...
            'Position', [0.02,0.05,0.96,0.3], ...
            'FontSize',fontSize,'FontName',fontName,...
            'BackgroundColor', [1 1 1;0.961 0.961 0.961], ...
            'ColumnEditable', [true,true], ...
            'ColumnFormat', {'numeric','numeric'}, ...
            'ColumnName', {'Rs','Rp'}, ...
            'ColumnWidth', {150,150}, ...
            'RowName',{'Rs','Rp'},...
            'Data',{[1],[0];[0],[1]});           
        %-----------------------------------------------------------------
        handles.tblCoatingList = uitable( ...
            'Parent', handles.panelCoatingListing, ...
            'Tag', 'tblCoatingList', ...
            'Units','Normalized',...
            'Position', [0.02,0.02,0.96,0.65], ...
            'FontSize',fontSize,'FontName',fontName,...
            'BackgroundColor', [1 1 1;0.961 0.961 0.961], ...
            'ColumnEditable', [false], ...
            'ColumnFormat', {'char'}, ...
            'ColumnName', {'Coating Names'}, ...
            'ColumnWidth', {220}, ...
            'RowName', 'numbered',...
            'Data',firstCatalogueCoatingNames');        
      %-------------------------------------------------------------------
      % Callbacks
       set(handles.popCoatingCatalogueName,...
           'Callback',{@popCoatingCatalogueName_Callback,handles});
       set(handles.popCoatingType,...
           'Callback',{@popCoatingType_Callback,handles});       
       set(handles.tblCoatingList,...
           'CellSelectionCallback',{@tblCoatingList_CellSelectionCallback,handles});
 
        %-----------------------------------------------------------------
       handles.cmdClearAll = uicontrol( ...
            'Parent', handles.panelMultilayerData, ...
            'Tag', 'cmdClearAll', ...
            'Style', 'pushbutton', ...
            'Units','Normalized',...
            'Position', [0.02,0.9,0.3,0.07], ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'String', 'Clear All', ...
            'Callback', {@cmdClearAll_Callback,handles});
       handles.cmdAddRow = uicontrol( ...
            'Parent', handles.panelMultilayerData, ...
            'Tag', 'cmdAddRow', ...
            'Style', 'pushbutton', ...
            'Units','Normalized',...
            'Position', [0.35,0.9,0.3,0.07], ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'String', 'Add (+)', ...
            'Callback', {@cmdAddRow_Callback,handles});        
       handles.cmdRemoveRow = uicontrol( ...
            'Parent', handles.panelMultilayerData, ...
            'Tag', 'cmdRemoveRow', ...
            'Style', 'pushbutton', ...
            'Units','Normalized',...
            'Position', [0.67,0.9,0.3,0.07], ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'String', 'Remove (-)', ...
            'Callback', {@cmdRemoveRow_Callback,handles}); 
      %------------------------------------------------------------------
      
      handles.cmdDeleteCoating = uicontrol( ...
            'Parent', handles.FigureHandle, ...
            'Tag', 'cmdDeleteCoating', ...
            'Style', 'pushbutton', ...
            'Units','Normalized',...
            'Position', [0.45,0.02,0.12,0.065], ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'String', 'Delete', ...
            'Callback', {@cmdDeleteCoating_Callback,handles});
       handles.cmdSaveCoating = uicontrol( ...
            'Parent', handles.FigureHandle, ...
            'Tag', 'cmdSaveCoating', ...
            'Style', 'pushbutton', ...
            'Units','Normalized',...
            'Position', [0.59,0.02,0.12,0.065], ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'String', 'Save', ...
            'Callback', {@cmdSaveCoating_Callback,handles});        
       handles.cmdOk = uicontrol( ...
            'Parent', handles.FigureHandle, ...
            'Tag', 'cmdOk', ...
            'Style', 'pushbutton', ...
            'Units','Normalized',...
            'Position', [0.73,0.02,0.12,0.065], ...
            'FontSize',fontSize,...
            'FontName',fontName,...
            'String', 'Ok', ...
            'Callback', {@cmdOk_Callback,handles});         
       handles.cmdCancel = uicontrol( ...
            'Parent', handles.FigureHandle, ...
            'Tag', 'cmdCancel', ...
            'Style', 'pushbutton', ...
            'Units','Normalized',...
            'Position', [0.87,0.02,0.12,0.065], ...
            'FontSize',fontSize,'FontName',fontName,...
            'String', 'Cancel', ...
            'Callback', {@cmdCancel_Callback,handles}); 
                
    % Display the first coating data
    selectedCatalogueFullName = handles.FirstCatalogueFullName;
    selectedCoatingIndex = 1;
    displayCoatingData(selectedCatalogueFullName,selectedCoatingIndex,handles);
    end

%% ---------------------------------------------------------------------------
    function popCoatingCatalogueName_Callback(~,~,handles )
        refreshCoatingDataInputDialog(handles);
    end

    function refreshCoatingDataInputDialog(handles)
        selectedCatalogueFullName = coatingCatalogueListFullNames{get(handles.popCoatingCatalogueName,'Value')};
        % extract the selected catalogue and coating from the catalogue
        selectedCatalogueCoatingArray = extractObjectFromObjectCatalogue...
            ('coating','all',selectedCatalogueFullName);
        selectedCatalogueCoatingNames =  {selectedCatalogueCoatingArray.Name};
        set(handles.tblCoatingList,'Data',selectedCatalogueCoatingNames');
        selectedCoatingIndex = 1;
        displayCoatingData(selectedCatalogueFullName,selectedCoatingIndex,handles);
    end


%% ---------------------------------------------------------------------------
function popCoatingType_Callback(hObject,~,handles)
    coatingTypeList =  get(handles.popCoatingType,'String');
    selectedCoatingType = coatingTypeList{get(hObject,'Value')};
    switch lower(selectedCoatingType)
        case lower('None')
            multilayerDataPanelVisible = 'off';
            jonesMatrixPanelVisible = 'off';        
        case lower('BareGlass')
            multilayerDataPanelVisible = 'off';
            jonesMatrixPanelVisible = 'off';
        case lower('Multilayer')
            multilayerDataPanelVisible = 'on';
            jonesMatrixPanelVisible = 'off';
        case lower('JonesMatrix')
            multilayerDataPanelVisible = 'off';
            jonesMatrixPanelVisible = 'on';
    end

    set(handles.panelMultilayerData,...
        'Visible',multilayerDataPanelVisible);
    set(handles.panelJonesMatrixData,...
        'Visible',jonesMatrixPanelVisible);
end

function tblCoatingList_CellSelectionCallback(hObject,eventdata,handles)
    selCell = eventdata.Indices;
    if ~isempty(selCell)
        selRow = selCell(1,1);
        selCol = selCell(1,2);
        selectedCoatingIndex = selRow;
        selectedCatalogueFullName = coatingCatalogueListFullNames...
            {get(handles.popCoatingCatalogueName,'Value')};
        displayCoatingData(selectedCatalogueFullName,selectedCoatingIndex,handles)
    end
end

function displayCoatingData(selectedCatalogueFullName,selectedCoatingIndex,handles)
    % extract the selected coating from the catalogue
    catalogueCoatingArray = extractObjectFromObjectCatalogue...
        ('coating','all',selectedCatalogueFullName);
    if isempty(catalogueCoatingArray)
        catalogueCoatingArray = Coating;
    end
    catalogueCoatingNames =  {catalogueCoatingArray.Name};
    if ~isempty(catalogueCoatingNames)
        selectedCoatingObject = catalogueCoatingArray(selectedCoatingIndex);

        selectedCoatingType = selectedCoatingObject.Type;
        switch lower(selectedCoatingType)
            case lower('None')
                selectedCoatingTypeIndex = 1;
                multilayerDataPanelVisible = 'off';
                jonesMatrixPanelVisible = 'off';            
            case lower('BareGlass')
                selectedCoatingTypeIndex = 2;
                multilayerDataPanelVisible = 'off';
                jonesMatrixPanelVisible = 'off';
            case lower('Multilayer')
                selectedCoatingTypeIndex = 3;
                multilayerDataPanelVisible = 'on';
                jonesMatrixPanelVisible = 'off';
            case lower('JonesMatrix')
                selectedCoatingTypeIndex = 4;
                multilayerDataPanelVisible = 'off';
                jonesMatrixPanelVisible = 'on';
            otherwise
                selectedCoatingTypeIndex = 3;
                multilayerDataPanelVisible = 'on';
                jonesMatrixPanelVisible = 'off';                
        end
        selectedCoatingName = selectedCoatingObject.Name;
        selectedCoatingParameters = selectedCoatingObject.CoatingParameters;
        
        % Update all data
        set(handles.panelMultilayerData,...
            'Visible',multilayerDataPanelVisible);
        set(handles.panelJonesMatrixData,...
            'Visible',jonesMatrixPanelVisible);
        
        set(handles.popCoatingType,'Value',selectedCoatingTypeIndex);
        set(handles.txtCoatingName,'String',selectedCoatingName);
        switch lower(selectedCoatingType)
            case lower({'None','BareGlass'})
                % Nothing more displayed
            case lower({'Multilayer'})
                selectedCoatingRefractiveIndexProfile = ...
                    selectedCoatingParameters.RefractiveIndexProfile;
                selectedCoatingWavelengthInUm = ...
                    selectedCoatingParameters.WavelengthInUm;
                selectedCoatingRepetetionNumber = ...
                    selectedCoatingParameters.RepetetionNumber;
                selectedCoatingUseInReverse = ...
                    selectedCoatingParameters.UseInReverse;
                
                set(handles.txtWavelengthInUm,'String',selectedCoatingWavelengthInUm);
                set(handles.txtRepetetion,'String',selectedCoatingRepetetionNumber);
                set(handles.chkReverse,'Value',selectedCoatingUseInReverse);
                
                colNum = size(selectedCoatingRefractiveIndexProfile,2);
                rowNum = size(selectedCoatingRefractiveIndexProfile,1);
                selectedCoatingRefractiveIndexProfile = mat2cell...
                    (selectedCoatingRefractiveIndexProfile,...
                    [ones(1,rowNum)],[ones(1,colNum)]);
                for p = 1:size(selectedCoatingRefractiveIndexProfile,1)
                    selectedCoatingRefractiveIndexProfile{p,3} = ...
                        logical(selectedCoatingRefractiveIndexProfile{p,3});
                end
                set(handles.tblRefractiveIndexProfile,'Data',...
                    selectedCoatingRefractiveIndexProfile);
            case lower('JonesMatrix')
                selectedCoatingTransmissionMatrix = ...
                    selectedCoatingParameters.TransmissionMatrix;
                selectedCoatingReflectionMatrix = ...
                    selectedCoatingParameters.ReflectionMatrix;
                
                set(handles.tblTransmissionMatrix,'Data',selectedCoatingTransmissionMatrix);
                set(handles.tblReflectionMatrix,'Data',selectedCoatingReflectionMatrix);
            otherwise
                disp('Error: Invalid coating type.');
                return;
        end
    end
end
%% ---------------------------------------------------------------------------
    function cmdDeleteCoating_Callback(hObject,evendata,handles) %#ok<INUSD>
        coatingCatalogueIndex = get(handles.popCoatingCatalogueName,'Value');
        selectedCoatingCatalogueFullName = coatingCatalogueListFullNames{coatingCatalogueIndex};
        objectType = 'coating';
        objectName = get(handles.txtCoatingName,'String');
        objectCatalogueFullName = selectedCoatingCatalogueFullName;       
        removeObjectFromObjectCatalogue(objectType, objectName,objectCatalogueFullName )
        refreshCoatingDataInputDialog(handles);
    end

%% ---------------------------------------------------------------------------
    function cmdClearAll_Callback(hObject,evendata,handles) %#ok<INUSD>
        set(handles.txtCoatingName,'String','New');
        set(handles.txtRepetetion,'String','1');
        set(handles.chkReverse,'Value',0);
        set(handles.tblRefractiveIndexProfile,'Data',[]);
        
    end
%% ---------------------------------------------------------------------------
    function cmdAddRow_Callback(hObject,evendata,handles) %#ok<INUSD>
        if strcmpi(class(get(handles.tblRefractiveIndexProfile,'data')), 'double')
            tblData1 = (get(handles.tblRefractiveIndexProfile,'data'));
        elseif strcmpi(class(get(handles.tblRefractiveIndexProfile,'data')), 'cell')
            tempTblData = (get(handles.tblRefractiveIndexProfile,'data'));
            tblData1 = [cell2mat(tempTblData(:,1:2)) cell2mat(tempTblData(:,3)) cell2mat(tempTblData(:,4))];
        else
            disp('Error: Unknown data type in refractive index profile table.')
            return;
        end
        newRow1 =  [1,0,0,0];
        newTable1 = [tblData1; newRow1]; 
        newTable1 = mat2cell(newTable1,[ones(1,size(newTable1,1))],[ones(1,size(newTable1,2))]);
        for p = 1:size(newTable1,1)
            newTable1{p,3} = logical(newTable1{p,3});
        end
        set(handles.tblRefractiveIndexProfile, 'Data', newTable1);
    end
%% ---------------------------------------------------------------------------
    function cmdRemoveRow_Callback(hObject,evendata,handles) %#ok<INUSD>
        if strcmpi(class(get(handles.tblRefractiveIndexProfile,'data')), 'double')
            tblData1 = num2cell(get(handles.tblRefractiveIndexProfile,'data'));
        elseif strcmpi(class(get(handles.tblRefractiveIndexProfile,'data')), 'cell')
            tblData1 = (get(handles.tblRefractiveIndexProfile,'data'));
        else
            disp('Error: Unknown data type in refractive index profile table.')
            return;
        end
        newTable1 = tblData1(1:end-1,:);
        
        set(handles.tblRefractiveIndexProfile, 'Data', newTable1);
    end

%% ---------------------------------------------------------------------------
    function cmdSaveCoating_Callback(~,~,handles) %#ok<INUSD>  
        objectType = 'coating';
        Object = getCurrentCoating(handles);
        coatingCatalogueIndex = get(handles.popCoatingCatalogueName,'Value');
        objectCatalogueFullName = coatingCatalogueListFullNames{coatingCatalogueIndex};
        addObjectToObjectCatalogue(objectType, Object,objectCatalogueFullName,'ask');
        refreshCoatingDataInputDialog(handles);       
    end
%% ---------------------------------------------------------------------------
    function cmdOk_Callback(hObject,evendata,handles) %#ok<INUSD>
        objectType = 'coating';
        Object = getCurrentCoating(handles);
        coatingCatalogueIndex = get(handles.popCoatingCatalogueName,'Value');
        objectCatalogueFullName = coatingCatalogueListFullNames{coatingCatalogueIndex};
        addObjectToObjectCatalogue(objectType, Object,objectCatalogueFullName,'replace');
        refreshCoatingDataInputDialog(handles);
        coatingObj = Object;
        save('tempcoating.mat','coatingObj');
        close(handles.FigureHandle);
        
    end

function currentCoating = getCurrentCoating(handles)
    coatingTypeList = get(handles.popCoatingType,'String');
    coatingType = coatingTypeList{get(handles.popCoatingType,'Value')};
    coatingName = get(handles.txtCoatingName,'String');
    switch lower(coatingType)
        case lower({'None','BareGlass'})
            coatingParameters = struct();
            coatingParameters.TransmissionMatrix = NaN*[1,0;0,1];
            coatingParameters.ReflectionMatrix = NaN*[1,0;0,1];

            coatingParameters.RefractiveIndexProfile = [NaN NaN (0) NaN];
            coatingParameters.RepetetionNumber = NaN*0;
            coatingParameters.UseInReverse = NaN*0;            
        case lower('Multilayer')
            coatingParameters = struct();
            coatingParameters.TransmissionMatrix = NaN*[1,0;0,1];
            coatingParameters.ReflectionMatrix = NaN*[1,0;0,1];
            
            coatingParameters.RepetetionNumber = ...
                str2double(get(handles.txtRepetetion,'String'));
            coatingParameters.WavelengthInUm = ...
                str2double(get(handles.txtWavelengthInUm,'String'));           
            coatingParameters.UseInReverse = ...
                get(handles.chkReverse,'Value');
            tblData1 = get(handles.tblRefractiveIndexProfile,'Data');
            
            % Compute the actual thickness for relative definition
            % Change the thickness from relative value to absloute
            % The actual thickness of the coating is determined by:
            % d = (wavLen0/n0)*T
            % where wavLen0 is the primary wavelength in micrometers ,
            % n0 is the real part of the index of refraction of the coating at the
            % primary wavelength, and T is the "optical thickness" of the coating
            % specified in the coating definition.            
            relativeThicknessFlag = cell2mat(tblData1(:,3));
            thicknessValue = cell2mat(tblData1(:,2));
            refractiveIndexValue = cell2mat(tblData1(:,1));
            relativeThicknessIndices = find(relativeThicknessFlag);
            relativeThicknessValue = thicknessValue;
            if ~isempty(relativeThicknessIndices)
                T = thicknessValue(relativeThicknessIndices,:);
                wavLen0 = coatingParameters.WavelengthInUm;
                % refractive index at primary wavelength. just take that for the 1st
                % wavelength.
                n0 = real(refractiveIndexValue(relativeThicknessIndices,1));
                relativeThicknessValue(relativeThicknessIndices,:) = (wavLen0/n0).*T;
            end           
           
            coatingParameters.RefractiveIndexProfile = ...
                [refractiveIndexValue thicknessValue relativeThicknessFlag relativeThicknessValue];
        case lower('JonesMatrix')
            coatingParameters = struct();
            tblData2 = get(handles.tblTransmissionMatrix,'Data');
            tblData3 = get(handles.tblReflectionMatrix,'Data');
            if strcmpi(class(tblData2),'cell')
                coatingParameters.TransmissionMatrix = [cell2mat(tblData2(:,:))];
                coatingParameters.ReflectionMatrix = [cell2mat(tblData3(:,:))];
            else
                coatingParameters.TransmissionMatrix = [(tblData2(:,:))];
                coatingParameters.ReflectionMatrix = [(tblData3(:,:))];
            end

            coatingParameters.RefractiveIndexProfile = [NaN NaN (0) NaN];
            coatingParameters.WavelengthInUm = NaN;
            coatingParameters.RepetetionNumber = NaN*0;
            coatingParameters.UseInReverse = NaN*0; 
    end
    currentCoating = Coating(coatingType,coatingName,coatingParameters);
end

%% ---------------------------------------------------------------------------
    function cmdCancel_Callback(hObject,evendata,handles) %#ok<INUSD>
        currentCoating = Coating;
        refreshCoatingDataInputDialog(handles);
%         coatingObj = Coating;
%         save('tempcoating.mat','coatingObj');
        close(handles.FigureHandle);
    end
end